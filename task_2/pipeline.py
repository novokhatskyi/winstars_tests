# -*- coding: utf-8 -*-
# PIPELINE: –ø–æ—î–¥–Ω–∞–Ω–Ω—è NER (DistilBERT) + CNN (Keras) –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ç–≤–µ—Ä–¥–∂–µ–Ω—å

import os
import numpy as np
import tensorflow as tf
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
from transformers import AutoTokenizer, TFAutoModelForTokenClassification

# ==== 1. –®–ª—è—Ö–∏ –¥–æ –º–æ–¥–µ–ª–µ–π ====
ROOT = os.path.dirname(os.path.abspath(__file__))
CNN_MODEL_PATH = os.path.join(ROOT, "artifacts/img_model/animal_cnn_model.h5")
NER_MODEL_PATH = os.path.join(ROOT, "artifacts/ner_model_torch")

# ==== 2. –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π ====
print("üîπ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –º–æ–¥–µ–ª–µ–π...")
cnn_model = load_model(CNN_MODEL_PATH)
tokenizer = AutoTokenizer.from_pretrained(NER_MODEL_PATH)
ner_model = TFAutoModelForTokenClassification.from_pretrained(NER_MODEL_PATH, from_pt=True)

# ==== 3. –í—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å –Ω–∞–∑–≤ ====
# –Ü—Ç–∞–ª—ñ–π—Å—å–∫—ñ –ø–∞–ø–∫–∏ ‚Üí –∞–Ω–≥–ª—ñ–π—Å—å–∫—ñ –∫–ª–∞—Å–∏
ITALIAN_TO_ENGLISH = {
    "cane": "dog",
    "cavallo": "horse",
    "elefante": "elephant",
    "farfalla": "butterfly",
    "gallina": "chicken",
    "gatto": "cat",
    "mucca": "cow",
    "pecora": "sheep",
    "ragno": "spider",
    "scoiattolo": "squirrel"
}

# –ö–ª–∞—Å–∏ –≤ —Ç–æ–º—É –∂ –ø–æ—Ä—è–¥–∫—É, —â–æ –π —É –Ω–∞–≤—á–∞–Ω–Ω—ñ CNN
CLASSES = list(ITALIAN_TO_ENGLISH.values())

# ==== 4. NER-—Ñ—É–Ω–∫—Ü—ñ—è ====
def extract_animal_from_text(text: str) -> str:
    """–í–∏—Ç—è–≥—É—î –Ω–∞–∑–≤—É —Ç–≤–∞—Ä–∏–Ω–∏ –∑ —Ç–µ–∫—Å—Ç—É"""
    tokens = tokenizer(
        text.split(),
        is_split_into_words=True,
        return_tensors="tf",
        truncation=True,
        padding=True
    )
    outputs = ner_model(tokens)
    logits = outputs.logits
    predictions = tf.math.argmax(logits, axis=-1).numpy()[0]

    id2label = ner_model.config.id2label
    labels = [id2label.get(int(p), "O") for p in predictions]
    words = tokenizer.convert_ids_to_tokens(tokens["input_ids"][0].numpy())

    for w, l in zip(words, labels):
        if l == "B-ANIMAL" and not w.startswith("##"):
            return w.lower()
    return None

# ==== 5. CNN-—Ñ—É–Ω–∫—Ü—ñ—è ====
def predict_animal_from_image(img_path: str) -> str:
    """–†–æ–∑–ø—ñ–∑–Ω–∞—î —Ç–≤–∞—Ä–∏–Ω—É –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ"""
    img = image.load_img(img_path, target_size=(75, 75))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    preds = cnn_model.predict(img_array, verbose=0)
    pred_class = np.argmax(preds, axis=1)[0]
    return CLASSES[pred_class]

# ==== 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è ====
def verify_statement(text: str, img_path: str) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑–±—ñ–≥–∞—î—Ç—å—Å—è —Ç–≤–∞—Ä–∏–Ω–∞ –∑ —Ç–µ–∫—Å—Ç—É —Ç–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è"""
    animal_text = extract_animal_from_text(text)
    animal_image = predict_animal_from_image(img_path)

    print(f"\nüìò –¢–µ–∫—Å—Ç–æ–≤–∞ —Ç–≤–∞—Ä–∏–Ω–∞: {animal_text}")
    print(f"üñºÔ∏è  –¢–≤–∞—Ä–∏–Ω–∞ –Ω–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—ñ: {animal_image}")

    if animal_text is None:
        print("‚ö†Ô∏è –£ —Ç–µ–∫—Å—Ç—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ—ó —Ç–≤–∞—Ä–∏–Ω–∏.")
        return False

    match = animal_text in animal_image or animal_image in animal_text
    print(f"‚úÖ –ó–±—ñ–≥: {match}\n")
    return match

# ==== 7. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä —ñ—Ç–∞–ª—ñ–π—Å—å–∫–∏—Ö —à–ª—è—Ö—ñ–≤ ====
def get_image_path(english_class: str) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —à–ª—è—Ö –¥–æ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ –∫–ª–∞—Å—É"""
    for italian, english in ITALIAN_TO_ENGLISH.items():
        if english == english_class:
            folder = os.path.join(ROOT, "dataset/raw-img", italian)
            images = [f for f in os.listdir(folder) if f.lower().endswith((".jpg", ".jpeg", ".png"))]
            if not images:
                raise FileNotFoundError(f"No images found in {folder}")
            return os.path.join(folder, images[0])  # –ø–µ—Ä—à–µ —Ñ–æ—Ç–æ
    raise ValueError(f"Class {english_class} not found in mapping")

# ==== 8. –¢–µ—Å—Ç ====
if __name__ == "__main__":
    samples = [
        ("There is a cow in the picture.", get_image_path("cow")),
        ("I see a small cat on the sofa.", get_image_path("cat")),
        ("This image shows a dog running.", get_image_path("dog")),
        ("There is a horse near the tree.", get_image_path("horse")),
    ]

    for text, img in samples:
        verify_statement(text, img)