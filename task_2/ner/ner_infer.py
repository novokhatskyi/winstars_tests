# -*- coding: utf-8 -*-
# NER_INFER ‚Äî —ñ–Ω—Ñ–µ—Ä–µ–Ω—Å –¥–ª—è –Ω–∞—Ç—Ä–µ–Ω–æ–≤–∞–Ω–æ—ó NER-–º–æ–¥–µ–ª—ñ (PyTorch)

import torch
from transformers import AutoTokenizer, AutoModelForTokenClassification

# ==== 1. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –º–æ–¥–µ–ª—å —ñ —Ç–æ–∫–µ–Ω–∞–π–∑–µ—Ä ====
MODEL_PATH = "task_2/artifacts/ner_model_torch"

tokenizer = AutoTokenizer.from_pretrained(MODEL_PATH)
model = AutoModelForTokenClassification.from_pretrained(MODEL_PATH)

device = torch.device("mps" if torch.backends.mps.is_available() else "cpu")
model.to(device)
model.eval()

# ==== 2. –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑—É ====
def predict_entities(text):
    """
    –ü—Ä–∏–π–º–∞—î –æ–¥–∏–Ω —Ä—è–¥–æ–∫ —Ç–µ–∫—Å—Ç—É.
    –†–æ–∑–±–∏–≤–∞—î –π–æ–≥–æ –Ω–∞ —Ç–æ–∫–µ–Ω–∏, –ø—Ä–æ–≥–∞–Ω—è—î —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–Ω–∞–π–¥–µ–Ω—ñ —Å—É—Ç–Ω–æ—Å—Ç—ñ.
    """
    tokens = tokenizer(
        text.split(),
        is_split_into_words=True,
        return_tensors="pt",
        truncation=True,
        padding=True
    ).to(device)

    with torch.no_grad():
        outputs = model(**tokens)
        logits = outputs.logits  # [batch_size, seq_len, num_labels]
        predictions = torch.argmax(logits, dim=-1)[0].cpu().numpy()

    # –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ id ‚Üí –Ω–∞–∑–≤–∏ —Ç–µ–≥—ñ–≤
    id2label = model.config.id2label
    labels = [id2label.get(int(p), "O") for p in predictions]

    # –¥–µ–∫–æ–¥—É—î–º–æ —Ç–æ–∫–µ–Ω–∏ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ
    words = tokenizer.convert_ids_to_tokens(tokens["input_ids"][0].cpu().numpy())

    # –≤–∏–≤—ñ–¥
    print("\nüü© –ê–Ω–∞–ª—ñ–∑ —Ä–µ—á–µ–Ω–Ω—è:")
    print("–¢–µ–∫—Å—Ç:", text)
    print("-" * 60)
    for w, label in zip(words, labels):
        if label != "O" and not w.startswith("##"):
            print(f"{w:<15} ‚Üí {label}")
    print("-" * 60, "\n")


# ==== 3. –¢–µ—Å—Ç–∏ ====
if __name__ == "__main__":
    examples = [
        "The dog is barking loudly.",
        "A black cat jumps on the table.",
        "A butterfly sits on a flower.",
        "The elephant walks in the field.",
        "A small squirrel climbs a tree.",
        "The sheep follows the flock."
    ]

    for ex in examples:
        predict_entities(ex)